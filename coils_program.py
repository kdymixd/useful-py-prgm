"""
Created on Thu Jun 22 16:01:21 2023

@author: Maxime LECOMTE

This programs allows to simply calculate the magnetic field generated by a coil which has some contraints
(geometric, electric, magnetic, ...). It simply adds all the magnetic fields generated by each coils,
placed at different points along an axis, called Z here. 

This program does not give a result (for now) of the elliptical 
integrals that appear when we want to calculate the field generated by two coils 
(Helmoltz or Anti-Helmoltz) outside the z axis. 
"""

import numpy as np
import scipy.stats as stats
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import scipy.optimize as opt
from scipy.optimize import curve_fit

scheme_path=r'Z:\UsefulPyPrograms\MagneticFieldsCoils\MOT_coils_schema.png'
#Plot the scheme
PlotScheme=False
if PlotScheme:
    """
    Scheme which allows to understand the previous notations
    """
    img = mpimg.imread(scheme_path)
    imgplot = plt.imshow(img)
    plt.show()

PlotProject1=False
PlotProject2=True

###############################################################################
# Project 2 : Bias and gradient generated by 
###############################################################################

if PlotProject2:
    """
    Returns the results of Project2
    """
    
    """Functions"""
    
    def B_1spire(R,z):
        """
        Magnetic field created by 1 spire along uz at a distance z, with an origin of the z axis
        at the center of the wire
        """
        return mu0*I*R**2/(2*(R**2 + z**2)**(3/2))

    def B_Nlspires(R,Nl,dl,z):
        """
        Magnetic field created by Nl spires (no space between each spire) along uz at a distance z. 
        The origin of z is supposed to be "at the center of the width along z of the first spire" - Q/2, 
        Q being the distance between the two closest spires of two different coils, from flange to 
        flange. The zero of z is thus naturally defined in the plane of symmetry between the two coils
        
        The coordinate along z for the spire will thus be : Q/2 + (i+1/2)*l. 
        """
        return sum(B_1spire(R,z-(Q/2+(i+1/2)*dl)) for i in range(Nl))
                   
    def B_NlNhspires(R,Nl,dl,Nh,dh,z):
        """
        Magnetic field created by Nl spires along z and Nh spires along the transverse direction
        """
        return sum(B_Nlspires(R+dh*(j+1/2),Nl,dl,z) for j in range(Nh))
    
    def B_H(R,Nl,dl,Nh,dh,z):
        """
        Magnetic field created by Nl spires along z and Nh spires along the transverse direction,
        in Helmoltz configuration (bias)

        """
        return B_NlNhspires(R,Nl,dl,Nh,dh,z) + B_NlNhspires(R,Nl,dl,Nh,dh,-z)
    
    def B_AH(R,Nl,dl,Nh,dh,z):
        """
        Magnetic field created by Nl spires along z and Nh spires along the transverse direction,
        in anti-Helmoltz configuration (bias)

        """
        return B_NlNhspires(R,Nl,dl,Nh,dh,z) - B_NlNhspires(R,Nl,dl,Nh,dh,z)
    
    def Rtot2Coils(Nl,dl,Nh,dh):
        """
        Total resitance of 2 coils
        """
        Rcoil = Rinner + dh/2
        Ltot = 2*Nh*Nl*2*np.pi*Rcoil
        return GammaCU*Ltot/(dl*dh)
    
    def Power(R,I):
        """
        Power dissipated
        """
        return R*I**2

"""
Units
"""

Gauss = 10000
cm = 1e-2
mm=1e-3
mu0=4*np.pi*1e-7 #SI
GammaCU = 16.78*1e-9

"""Rectangle shape of the wires"""

I=150 #A
dh0=20*mm #Diameter of a section of a copper wire, in meters
dl0=6*mm
Nl0=9 #Number of wires over the z axis
Nh0=1 #Number of wires along the transverse axis
Q=55.626*mm-dl0
Rinner=60e-3 #Diameter we have to keep to observe atoms
Pmax=15*150

"""Plots"""

"""Bz(z)"""

def PlotB():
    Z=np.linspace(-110*mm,110*mm,1000)
    plt.figure()
    plt.plot(Z,B_H(Rinner+dh0/2,Nl0,dl0,Nh0,dh0,Z)*10000, label='Bz(z)')

    Pos=[-Q/2-dl0/2,Q/2+dl0/2]
    plt.axvline(x=Pos[0], color='r', linestyle='--', label='UpEdge')
    plt.axvline(x=Pos[1], color='r', linestyle='--', label='LowEdge')
    plt.xlabel('z (m)')
    plt.ylabel('Bz (G)')
    plt.xlim(-0.2,0.2)
    plt.title('Bz(z)', loc='center')
    plt.legend(loc='upper left')
    plt.savefig("Bz(z).png",dpi=300)
    plt.show()

    #print('GradB=', (B_feshG(D1/2,Q2/2,Nlfesh,Nhfesh)-B_feshG(D1/2,-Q2/2,Nlfesh,Nhfesh))/Q2 ) 
    print('B0=', B_H(Rinner+dh0/2,Nl0,dl0,Nh0,dh0,0)*10000, "G") 


"""Maximum Bz(0) that we could reach"""

def OptiB():
    """
    Simple algoryhthm which finds the best value of B within lists of parameters
    """
    Ilist = [k for k in range (50, 200)]
    dhlist = [2*mm, 4*mm, 6*mm, 8*mm, 10*mm ,12*mm, 15*mm, 20*mm]
    dllist = [1*mm, 3*mm, 5*mm, 7*mm]
    Nllist=[1, 3, 5, 7, 11, 13, 15]
    Blist=[]
    for a in Ilist:
        for b in dhlist:
            for c in dllist:
                for d in Nllist:
                    Res = Rtot2Coils(d,c,Nh0,b)
                    Pow = Res*(a**2)
                    if Pow < Pmax:
                        parameters=[a,b,c,d,B_H(Rinner+dh0/2,d,c,Nh0,b,0)*10000]
                        Blist.append(parameters)
    
    Bbest=Blist[0]
    
    for e in Blist:
        if e[4]>Bbest[4]:
            Bbest=e
    
    print("Bbest : ", Bbest)
    print("Best I : ", Bbest[0])
    print("Best dh : ", Bbest[1])
    print("Best dl : ", Bbest[2])
    print("Best Nl : ", Bbest[3])

    return Bbest

"""Bz(z) optimized"""

Bbest=OptiB()
Z=np.linspace(-110*mm,110*mm,1000)

plt.figure()
plt.plot(Z,B_H(Rinner+dh0/2,Bbest[3],Bbest[2],Nh0,Bbest[1],Z)*10000, label='Bz(z) opti')

Pos=[-Q/2-dl0/2,Q/2+dl0/2]
plt.axvline(x=Pos[0], color='r', linestyle='--', label='UpEdge')
plt.axvline(x=Pos[1], color='r', linestyle='--', label='LowEdge')
plt.xlabel('z (m)')
plt.ylabel('Bz (G) optimized')
plt.xlim(-0.2,0.2)
plt.title('Bz(z)', loc='center')
plt.legend(loc='upper left')
plt.savefig("Bz(z)_opti.png",dpi=300)
plt.show()
 
print('B0 optimized =', B_H(Rinner+dh0/2,Bbest[3],Bbest[2],Nh0,Bbest[1],0)*10000, "G") 
OptiRes = Rtot2Coils(Bbest[3],Bbest[2],Nh0,Bbest[1])
OptiPow = OptiRes*(Bbest[0]**2)
print("Resistance in the optimal case : ", OptiRes, "Ohm")
print("Power in the optimal case : ", OptiPow, "W")   










# ###############################################################################
# # Project 1 : Bias and gradient for the MixD-Dy MOT
# ###############################################################################

# if PlotProject1:
#     """
#     Returns the results of Project1
#     """

#     """Functions"""

#     def B_1spire(R,z):
#         """
#         Magnetic field created by 1 spire along uz at a distance z, with an origin of the z axis
#         at the center of the wire
#         """
#         return mu0*I*R**2/(2*(R**2 + z**2)**(3/2))

#     def B_Nlspires(R,z,Nl):
#         """
#         Magnetic field created by Nl spires (no space between each spire) along uz at a distance z
#         """
#         return sum(B_1spire(R,z-(Q2/2+(i+1/2)*dlfesh)) for i in range(Nl))
                   
#     def B_NlNhspires(R,z,Nl,Nh):
#         """
#         Magnetic field created by Nl spires along uz and Nh spires along the transverse direction at a distance z
#         """
#         return sum(B_Nlspires(R+dhfesh*(j+1/2),z,Nl) for j in range(Nh))

#     def B_fesh(R,z,Nl,Nh):
#         """
#         Magnetic field created by Nl spires and Nh spires for each coil in a Helmoltz configuration
#         """
#         return B_NlNhspires(R,z,Nl,Nh)+B_NlNhspires(R,-z,Nl,Nh)

#     def B_feshG(R,z,Nl,Nh):
#         """
#         Result given in Gauss
#         """
#         return B_fesh(R,z,Nl,Nh)*10000
    
#     #Conditions on the coils
#     mu0=4*np.pi*1e-7 #SI
#     I=150 #A
#     dhfesh=6e-3 #Diameter of a section of a copper wire, in meters
#     dlfesh=6e-3
#     Nlfesh=9 #Number of wires over the z axis
#     Nhfesh=11 #Number of wires along the transverse axis
#     lfesh=Nlfesh*dlfesh
#     hfesh=Nhfesh*dhfesh
#     Q2=124.06e-3 
#     Q1=Q2+2*lfesh
#     D1=70e-3 #Diameter we have to keep to observe atoms

#     """Bz(z)"""
    
#     Z=np.linspace(-1500e-3,1500e-3,1000)
    
#     plt.plot(Z,B_feshG(D1/2,Z,Nlfesh,Nhfesh), label='Bz(z)')
    
#     Pos=[-Q2/2,Q2/2]
#     plt.axvline(x=Pos[0], color='r', linestyle='--', label='UpEdge')
#     plt.axvline(x=Pos[1], color='r', linestyle='--', label='LowEdge')
#     plt.xlabel('z (m)')
#     plt.ylabel('Bz (G)')
#     plt.xlim(-0.5,0.5)
#     plt.title('Bz(z) for Feshbach coils', loc='center')
#     plt.legend(loc='upper left')
#     plt.savefig("Bz(z) for Feshbach coils.png",dpi=300)
#     plt.show()
    
#     #print('GradB=', (B_feshG(D1/2,Q2/2,Nlfesh,Nhfesh)-B_feshG(D1/2,-Q2/2,Nlfesh,Nhfesh))/Q2 ) 
#     print('B0=', B_feshG(D1/2,0,Nlfesh,Nhfesh)) 
#     print('Nhfesh_max= 15')
    
    
#     """Nlfesh dependance of B(0)"""
    
#     Nlfesh_list=[k for k in range(20)]
#     B_feshGNl=[B_feshG(D1/2,0,e,Nhfesh) for e in Nlfesh_list]
    
#     plt.scatter(Nlfesh_list,B_feshGNl)
#     plt.xlabel('Nlfesh')
#     plt.ylabel('Bz(z=0) (G)')
#     #plt.xlim(-0.5,0.5)
#     plt.title('Bz(z=0) vs Nlfesh for Feshbach coils', loc='center')
#     plt.savefig("Bz(z=0) vs Nlfesh for Feshbach coils.png",dpi=300)
#     #plt.legend(loc='upper left')
#     plt.show()
    
    
#     """Nhfesh dependance of B(0)"""
    
#     Nhfesh_list=[k for k in range(20)]
#     B_feshGNh=[B_feshG(50e-3+hfesh/2,0,Nlfesh,e) for e in Nhfesh_list]
    
#     plt.scatter(Nhfesh_list,B_feshGNh)
#     plt.xlabel('Nhfesh')
#     plt.ylabel('Bz(z=0) (G)')
#     #plt.xlim(-0.5,0.5)
#     plt.title('Bz(z=0) vs Nhfesh for Feshback coils', loc='center')
#     plt.savefig("Bz(z=0) vs Nhfesh for Feshbach coils.png",dpi=300)
#     #plt.legend(loc='upper left')
#     plt.show()
    
    
#     """Q2 dependance of B(0)"""
    
#     Q2list=np.linspace(90e-3,200e-3,1000)
    
#     def B_NlspiresQ(Q1,R,z,Nl): #magentic field created by Nl spires along uz at a distance z
#         return sum(B_1spire(R,z-(Q1/2+i*dlfesh)) for i in range(Nl))
                   
#     def B_NlNhspiresQ(Q1,R,z,Nl,Nh): #magentic field created by Nl spires along uz and Nh spires along the transverse direction at a distance z
#         return sum(B_NlspiresQ(Q1,R+dhfesh*(j-1/2),z,Nl) for j in range(Nh))
    
#     def B_feshQ(Q1,R,z,Nl,Nh): #magnetic field created by Nl spires and Nh spires for each coil in a Helmoltz configuration
#         return B_NlNhspiresQ(Q1,R,z,Nl,Nh)+B_NlNhspiresQ(Q1,R,-z,Nl,Nh)
    
#     def B_feshGQ(Q1,R,z,Nl,Nh): #in Gauss
#         return B_feshQ(Q1,R,z,Nl,Nh)*10000
    
#     plt.scatter(Q2list,B_feshGQ(Q2list+2*lfesh,50e-3+hfesh/2,0,Nlfesh,Nhfesh))
#     plt.xlabel('Q2 (m)')
#     plt.ylabel('Bz(z=0) (G)')
#     #plt.xlim(-0.5,0.5)
#     plt.title('Bz(z=0) vs Q2 for Feshbach coils', loc='center')
#     plt.savefig("Bz(z=0) vs Q2 for Feshbach coils.png",dpi=300)
#     #plt.legend(loc='upper left')
#     plt.show()

